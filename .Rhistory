head(Master)
data("Batting")
head(Batting)
dim(Master)
dim(Batting)
length(unique(Batting$playerID))
length(unique(Master$playerID))
batting_left <- left_join(Batting, Master, by = "playerID")
head(batting_left)
batting_left[batting_left$nameFirst == "Barry",]
Master[Master$nameFirst == "Barry",]
head[batting_left]
head(batting_left)
batting_left[batting_left$playerID == "bondsba01",]
dim(batting_left[batting_left$playerID == "bondsba01",])
dim(batting_left[batting_left$playerID == "bondsba01", batting_left$HR])
batting_left[batting_left$playerID == "bondsba01", batting_left$HR]
batting_left[batting_left$playerID == "bondsba01", 12]
sum(batting_left[batting_left$playerID == "bondsba01", 12])
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
batting_left[batting_left$nameFirst == "Barry",]
batting_left <- left_join(Batting, Master, by = "playerID")
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
batting_left %>% group_by(playerID) %>%summarise(HR_total = sum(HR))
batting_left %>% group_by(playerID) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
batting_left %>% group_by(playerID, nameFirst) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
head(HR_summary, 20)
data("Pitching")
head(Pitching)
dim(Pitching)
dim(Master)
pitching_left <- left_join(Pitching, Master, by = "playerID")
head(pitching_left)
length(unique(Pitching$playerID))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst)
%>%summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W), desc(SO))
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>% summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
Pitch_summary
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
data("AwardsPlayers")
AwardsPlayers %>% filter(awardID == "World Series MVP")
dim(AwardsPlayers %>% filter(awardID == "World Series MVP"))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(awardID))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID))
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID")
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate)
?year
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
data(Master)
data("Batting")
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[Master$nameFirst == "Barry",]
# Find player ID for "Barry Bonds"
Master[Master$nameFirst == "Barry" & Master$nameLast = "Bonds",]
Master[(Master$nameFirst == "Barry" & Master$nameLast = "Bonds"),]
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst)
%>%summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Yes Manny is in top 20,  at 15th position with 555 home run score
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
# Every Pitcher in the baseball history who has accumulated at least 300 wins (W) and
#at least 3,000 strikeouts (SO)
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
# Table with 10 most recent World Series MVP awardees. Include their names and ages
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>%
select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10)
%>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate)
%>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
# Left join Batting and Master by player ID
batting_left <- left_join(Batting, Master, by = "playerID")
# Find player ID for "Barry Bonds"
Master[(Master$nameFirst == "Barry" & Master$nameLast == "Bonds"),]
#Confirming Barry Bonds Home Run hit of 762
sum(batting_left[batting_left$playerID == "bondsba01", "HR"])
#sorting the data table as per most home runs in descending order
HR_summary <- batting_left %>% group_by(playerID, nameFirst) %>%
summarise(HR_total = sum(HR)) %>% arrange(desc(HR_total))
#Listing TOP 20
head(HR_summary, 20)
# Yes Manny is in top 20,  at 15th position with 555 home run score
# Left join Pitching and Master by player ID
pitching_left <- left_join(Pitching, Master, by = "playerID")
#Summarising for Win Total and Strikeout total
Pitch_summary <- pitching_left %>% group_by(playerID, nameFirst) %>%
summarise(W_total = sum(W), SO_total = sum(SO)) %>% arrange(desc(W_total), desc(SO_total))
# Every Pitcher in the baseball history who has accumulated at least 300 wins (W) and
#at least 3,000 strikeouts (SO)
Pitch_summary %>% filter(W_total >= 300 & SO_total >= 3000)
# Table with 10 most recent World Series MVP awardees. Include their names and ages
AwardsPlayers %>% filter(awardID == "World Series MVP") %>% arrange(desc(yearID)) %>% head(10) %>% left_join(Master, by = "playerID") %>% mutate(Age = Sys.Date()-birthDate) %>% select(playerID, nameFirst, nameLast, Age, awardID, yearID)
model <- xgb.train(params = list(booster = "gbtree",
eta = 0.01,
max_depth = max.depth,
min_child_weight = min_child_weight,
subsample = subsample,
colsample_bytree = colsample,
objective = "binary:logistic",
eval_metric = "auc"),
data = dtrain,
nround = optimal_round,
maximize = TRUE,
lambda = lambda,
gamma = gamma,
alpha = alpha,
nthread = 10,
verbose = TRUE,
tree_method = 'auto'
)
install.packages("rvest")
library(rvest)
site <- html("https://campus.datacamp.com/courses/machine-learning-with-the-experts-school-budgets/exploring-the-raw-data?ex=6")
DC <- site %>% html_nodes(".exercise--typography") %>% html_text()
DC
sol <- site %>% html_nodes(".lm_items") %>% html_text()
sol
sol <- site %>% html_nodes(xpath = "//*[contains(concat( " ", @class, " " ), concat( " ", "lm_items", " " ))]") %>% html_text()
sol <- site %>% html_nodes(xpath = "//*[contains(concat( " ", @class, " " ), concat( " ", "lm_items", " " ))]")
site %>% html_nodes(".div.ace_content") %>% html_text()
site %>% html_nodes(xpath = "//*[contains(concat( " ", @class, " " ), concat( " ", "lm_items", " " ))]")
site %>% html_nodes(".ace_content") %>% html_text()
site <- html("https://campus.datacamp.com/courses/machine-learning-with-the-experts-school-budgets/exploring-the-raw-data?ex=6")
library("rvest", lib.loc="~/R/win-library/3.3")
site <- html("https://campus.datacamp.com/courses/machine-learning-with-the-experts-school-budgets/exploring-the-raw-data?ex=6")
DC <- site %>% html_nodes(".exercise--typography") %>% html_text()
DC
site <- read_html("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=3")
sol <- site %>% html_nodes(".ace_content") %>% html_text()
sol
sol <- site %>% html_nodes(".div_class") %>% html_text()
DC <- site %>% html_nodes(".exercise--typography") %>% html_text()
DC
for (i = 1:19) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
for i = 1:19 {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
page <- C(1 : 19)
page <- c(1 : 19)
page
for (i in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
page <- c(3, 5:8, 10:15, 18, 19)
for (i in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
page
for (page[i] in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
for (page[i] in seq_along(page)) {
site <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[i] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
for (page[i] in seq_along(page)) {
site[[i]] <- read_html(cat("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",i))
DC[[i]] <- site %>% html_nodes(".exercise--typography") %>% html_text()
}
length(page)
pages <- data.frame(link = rep("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",13), p = page))
pages <- data.frame(link = rep("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",13), p = page)
pages
data.frame(cat(link, p))
data.frame(cat(pages$link, pages$p))
pages <- cat(pages$link, pages$p)
pages$link
pages
pages <- data.frame(link = rep("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=",13), p = page)
pages$link
cat(pages$link, pages$p)
paste(pages$link, pages$p)
library("purrr", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
pages_1 <- paste(pages$link, pages$p)
pages_1
DC <- pages_1 %>% map(read_html()) %>% map(html_nodes(".exercise--typography")) %>% html_text()
site <- map(pages_1, read_html)
site
DC <- site %>% map(html_nodes(".exercise--typography")) %>% map(html_text)
DC <- site %>% map(html_nodes(".exercise--typography"))
DC <- site %>% html_nodes(".exercise--typography")
site <- map_chr(pages_1, read_html)
site <- map(pages_1, read_html)
summary(site)
site1 <- unlist(site)
site1
summary(site1)
site1 %>% html_nodes(".exercise--typography")
site <- map(pages_1, read_html)
DC <- site %>% html_nodes(".exercise--assignment")
sit <- read_html("https://campus.datacamp.com/courses/intro-to-text-mining-bag-of-words/jumping-into-text-mining-with-bag-of-words?ex=3")
sit
DC <- sit %>% html_nodes(".exercise--typography") %>% html_text()
DC
length(pages_1)
for (i in site){
DC <- site %>% html_nodes(".exercise--assignment") %>% html_text()
DC
}
for (i in site){
DC <- i %>% html_nodes(".exercise--assignment") %>% html_text()
DC
}
DC
for (i in seq_along(site)){
DC[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
}
DC
for (i in seq_along(site)){
DC[[i]] <- site[[i]] %>% html_nodes(".exercise--typography") %>% html_text()
}
for (i in seq_along(site)){
DC[[i]][[1]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC[[i]][[2]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
}
for (i in seq_along(site)){
DC[[i]][1] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC[[i]][2] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
}
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]], /n)
print(DC_in[[i]],/n)
}
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
print(DC_in[[i]])
}
DC_a <- list[]
DC_in <- list[]
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
print(DC_in[[i]])
}
DC_a <- list[c()]
DC_in <- list[c()]
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
#print(DC_a[[i]])
#print(DC_in[[i]])
}
DC_a <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
DC_in <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
#print(DC_a[[i]])
#print(DC_in[[i]])
}
DC_a <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
DC_in <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
print(DC_in[[i]])
}
DC_a <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
DC_in <- list(p = c(2, 4, 6),   q = c(21, 24, 27),   r = c(28, 32, 36))
for (i in seq_along(site)){
DC_a[[i]] <- site[[i]] %>% html_nodes(".exercise--assignment") %>% html_text()
DC_in[[i]] <- site[[i]] %>% html_nodes(".exercise--instructions") %>% html_text()
print(DC_a[[i]])
cat("\n")
print(DC_in[[i]])
cat("\n")
cat("\n")
cat("\n")
}
DC_a[[1]]
data.table(a = c(1L, 2L), b = LETTERS[1:4])
install.packages("data.table")
library("data.table", lib.loc="~/R/win-library/3.3")
data.table(a = c(1L, 2L), b = LETTERS[1:4])
DT <- data.table(a = c(1L, 2L), b = LETTERS[1:4])
DT[3]
DT[3]
DT[2:3]
x <- c("red", "green", "green", "red", "red")
table(x)
factor(x)
y <- factor(x)
summary(y)
y
summary(x)
df <- data.frame(
x = c(47, 13, 5, 46),
y = c("A", "B", "C", "D"),
z = c(34, 50, 22, 42)
)
df
idx <- order(
df$x
, decreasing = TRUE)
idx
df[idx, ]
mat_b <- matrix(1:12, nrow = 2, byrow = FALSE)
mat_b
vals <- c("medium", "low", "high", "low")
vals_fct <- factor(vals, levels = c("low", "medium", "high"), ordered = TRUE)
vals_fct[3] < vals_fct[4]
vals
vals_fct
summary(vals_fct)
y <- c(NA, 13, 19, 18)
average <- function(x,
...
) {
mean(x, ...)
}
average(y, na.rm = TRUE)
?round
?labels
getwd()
x <- runif(10)
x
?runif
seq(x)
x <- c()
x
1:length(x)
seq(x)
vector("numeric", 5)
vector("character", 3)
n <- 1e5
n
n-1
x_empty <- c()
system.time(for(i in seq(n)) x_empty <- c(x_empty, i))
x_zeros <- vector("integer", n)
system.time(for(i in seq(n)) x_zeros[i] <- i)
x <- c(1, 2, 12)
any(x > 10)
x <- c(1, 2, 12, 15)
any(x > 10)
all(x > 0)
all(x > 10)
train <- read_csv("~/GitHub/Data Hack/train.csv")
setwd("~/GitHub/Imbalanced Data")
getwd()
library(data.table)
train <- fread("train.csv",na.strings = c(""," ","?","NA",NA))
test <- fread("test.csv",na.strings = c(""," ","?","NA",NA))
dim(train)
str (train)
dim(test)
str (test)
unique(train$income_level)
unique(test$income_level)
my_first_data_table <- data.table(x = c("a", "b", "c", "d", "e"),
y = c(1, 2, 3, 4, 5))
my_first_data_table
DT <- data.table(a = c(1L, 2L), b = LETTERS[c(1,2,3,4)])
DT
DT[3, ]
DT[2:3]
DT[.N - 1]
names(DT)
dim(DT)
data.table(DT[2, ], DT[2, ], DT[3, ])
data.table(c(DT[2, ], DT[2, ], DT[3, ]))
DT[c(2, 2, 3)]
DT1 <- data.table(A = c(1,2,3,4,5), B = c("a","b","c","d","e"), c(6, 7, 8, 9, 10))
DT1
DT1 <- data.table(A = c(1,2,3,4,5), B = c("a","b","c","d","e"), C = c(6, 7, 8, 9, 10))
DT1
DT1[c(1, 3), .(B, C)]
ans <- DT1[, .(B, val = A*C)]
ans
ans2 <- DT1[, .(B, val = as.integer(c(C, A)))]
DT1[, .(B, val = as.integer(c(C, A)))]
setwd("~/GitHub/Data Hack")
train <- read_csv("~/GitHub/Data Hack/train.csv")
library(readr)
train <- read_csv("~/GitHub/Data Hack/train.csv")
test <- read_csv("~/GitHub/Data Hack/test.csv")
glimpse(train) #2618, 87
library(purrr)
library(dplyr)
library(ggplot2)
library(readr)
library(caret)
library(broom)
library(readxl)
library(xgboost)
library(pROC)
library(DMwR)
submit_df <- cbind(ID = test$ID, Purchase = test$Purchase)
test$Purchase <- rep(0, times = length(test$ID))
submit_df <- cbind(ID = test$ID, Purchase = test$Purchase)
submit_df <- data.frame(submit_df)
all_chi_table <- function(x, y = train$Purchase){
tab = table(x, y)
chisq.test(tab, correct = T)
}
all_bar_chart <- function(i, lab, nam){
ggplot(train, aes(x = i, fill = Purchase)) + geom_bar(position = "dodge") +
scale_x_discrete(name = nam, labels = lab) +
theme(axis.text.x = element_text(angle  = 60,hjust = 1,size = 10))
}
all_prop_table <- function(x, y = train$Purchase){
round(prop.table(table(x, y)) * 100, 2)
}
map(train[, 4], function(x) all_bar_chart(x, L[chi_df$Code.type[4]],
as.character(chi_df$Description[4])))
L0_subtype <- c("High Income, expensive child", "Very Important Provincials",
"High status seniors", "Affluent senior apartments", "Mixed seniors",
"Career and childcare", "Dinki's (double income no kids)",
"Middle class families", "Modern, complete families", "Stable family",
"Family starters", "Affluent young families", "Young all american family",
"Junior cosmopolitan", "Senior cosmopolitans", "Students in apartments",
"Fresh masters in the city", "Single youth", "Suburban youth",
"Etnically diverse", "Young urban have-nots", "Mixed apartment dwellers",
"Young and rising", "Young, low educated", "Young seniors in the city",
"Own home elderly", "Seniors in apartments", "Residential elderly",
"Porchless seniors,  no front yard", "Religious elderly singles",
"Low income catholics", "Mixed seniors", "Lower class large families",
"Large family, employed child", "Village families", "Couples with teens
'Married with children", "Mixed small town dwellers",
"Traditional families", "Large religous families", "Large family farms",
"Mixed rurals")
L1_years <- c(" 20-30", "30-40", " 40-50", "50-60", "60-70", "70-80")
L2_type <- c("Successful hedonists", "Driven Growers", "Average Family",
"Career Loners", "Living well", "Cruising Seniors",
"Retired and Religeous", "Family with grown ups", "Conservative families",
"Farmers")
L3_percent <- c("0%", "1 - 10%", "11 - 23%", "24 - 36%", "37 - 49%", "50 - 62%",
"63 - 75%", "76 - 88%", "89 - 99%", "100%")
L4_num <- c("0", "1 - 49", "50 - 99", "100 - 199", "200 - 499", "500 - 999",
"1000 - 4999", "5000 - 9999", "10,000 - 19,999", ">= 20,000")
abbrevation <- data.frame(read_excel("~/GitHub/Data Hack/abbrevation.xlsx"))
abbrevation
train[, abbrevation[1,1]]
L[[abbrevation[1, 3]]]
L <- list(L1_years, L2_type, L3_percent, L4_num)
names(L) <-c("L1_years", "L2_type", "L3_percent", "L4_num")
T
L
L[[abbrevation[1, 3]]]
L[abbrevation[1, 3]]
L[abbrevation$Code.type[1]]
abbrevation$Code.type[1]
L <- list(L0_subtype, L1_years, L2_type, L3_percent, L4_num)
names(L) <-c("L0_subtype","L1_years", "L2_type", "L3_percent", "L4_num")
L[abbrevation$Code.type[1]]
abbrevation
map(train[, abbrevation[1,1]], function(x) all_bar_chart(x, L[abbrevation$Code.type[1]]), abbrevation$Description[1])
abbrevation$Description[1]
map(train[, abbrevation[1,1]], function(x) all_bar_chart(x, L[abbrevation$Code.type[1]], abbrevation$Description[1]))
all_bar_chart <- function(i, lab, nam){
ggplot(train, aes(x = factor(i), fill = factor(Purchase))) + geom_bar(position = "dodge") +
scale_x_discrete(name = nam, labels = lab) +
theme(axis.text.x = element_text(angle  = 60,hjust = 1,size = 10))
}
map(train[, abbrevation[1,1]], function(x) all_bar_chart(x, L[abbrevation$Code.type[1]], abbrevation$Description[1]))
